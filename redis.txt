----------------------------
------安装redis-------------
----------------------------
1、官网下载redis安装包
2、yum install gcc(安装gcc环境)
3、在redis根目录下 make && make install
4、redis默认安装路径：/usr/lcoal/bin
5、在/usr/lcoal/bin下创建目录eyesconfig,用来放配置文件
6、redis默认不是后台启动，配置文件daemonize 属性改为yes 
7、redis-server [redis配置文件路径]启动服务器
8、redis-cli -h [IP] -p [PORT] 客户度连接redis服务器
9、客户端模式下ping ,服务端返回pong,表示连接成功
10、ps -ef | grep redis 查看redis相关进程信息
11、shutdown 关闭服务器
11、exit 客户端断开连接

-----------------------------
----redis-benchmark----------
-----------------------------
redis-benchmark
1、简单测试下并发
#测试：100个并发连接 100000个请求
redis-benchmark -h localhost -p 6379 -c 100 -n 100000

====== SET ======
  100000 requests completed in 1.80 seconds 
  100 parallel clients --100个并发客户端
  3 bytes payload --每次写入3字节
  keep alive: 1 --只有1台服务器来出列这些请求

34.54% <= 1 milliseconds
99.68% <= 2 milliseconds
99.90% <= 3 milliseconds
99.92% <= 142 milliseconds
99.94% <= 143 milliseconds
100.00% <= 143 milliseconds --所有请求在143ms内完成
55555.56 requests per second --每秒处理55555.56请求

---------------------------
-------基础知识------------
---------------------------
redis默认有16个数据库（配置文件中有配置），我们默认使用的是第0个
切换数据库：select 3 	--使用第3个数据库
keys *					--查看所有key
dbsize 					--查看当前库大小（key个数）
get 【key】 			--获取key对应的value
flushdb 				--清空当前库
flushall 				--清空所有库
exists 【key】			--判断key是否存在，返回1存在，0不存在
move [key] [数据库名] 	--删除某个数据库的某个key
expire [key] [时间-秒] 	--设置某个数据多长时间后过期
ttl [key]				--查看过期时间
type [key]				--查看当前数据类型

6379---女明星九宫格输入法按键数字

---------------------------
----redis数据类型----------
---------------------------
【来自官网】Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message brokerRedis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster
redis可用来当做数据库，缓存，消息队列
redis五种基础类型：string, hash, list, set, sorted set
redis三中特殊类型：bitmaps, hyperloglogs, geospatial indexes, streams
string类型：key：value
1、set [string]								--设置值
2、get [string]								--get string value
3、APPEND [string] 							--append string after old string，return the length/4、of cur string,if old string is null , method append equals method set
5、incr [key]								--add 1
6、decr [key]								--decr 1
7、decrby [key] [decrement]					--decr decrement
8、getrange [key] [start] [end]				--sub string value of [key] [start, end],if end equals  -1 ,then return the whole string
9、setrange [key] [offset] [string]			-- replace the old string from index [offset]
10、setex [key] [time-second] [value]		--set a value with ex time,replace it if value is exist
11、setnx [key] [time-second] [value]		--set a value with ex time,create failed if value is exist。乐观锁应用
12、mset k1 v1 k2 v2 k3 v3 ...				--set mutiple key-value [k1,v2] [k2,v2] [k3,v3] redis存对象：常规存法,value是json串，解析麻烦：set user:1 {name:zhangsan, age:3}；key-value巧妙设计 mset user:{id}:{filed} value,其中id-1,filed-name or age，value zhangsan or 3
13、msetnx k1 v1 k2 v2 k3 v3 k4 v4...		--atmoic set mutiple key-value
14、getset [key] [value] 					--if exists,return nil and set new value ;if not exists return old value and set new value
string类型，value除了是字符串还可以是数字！——计数器，统计多单位数量-incrby

list类型：key：value1,value1,value2,value2,value3..
1、lpush [key] [value]							--push one or more value into list head
2、lrange [key] [begin] [end]					--get value index between begin and end,if end = -1 ,get all value
3、rpush [key] [value]							--push one or more value into list tail
4、rpop [key]									--return and remove tail value
5、lpop [key]									--return and remove head value
6、llen [key]									--get list length
7、lrem [key] [count] [value]					--remove certain [count] value。存在相同元素时，可选择从头移除多少个元素
8、ltrim [key] [start] [stop]					--通过下标截取指定长度的元素，这个list已经被改变
9、rpoplpush [list1] [list2]					--remove value from list1's tail and push value to list2's head
10、lset [key] [index] [value]					--更新指定位置的值，index位置不存在会报错
11、linsert [key] [before|after] [value1] [value2]				--在key列表中value1的前或后插入value2
list实际上是一个链表。
消息队列，消息排队。[lpush,rpop]-消息队列 [lpush,lpop-栈]

set类型：key：value1,value2,value3..
set中的值不能够重复--无序不重复集合
1、sadd [key] [value]							--add one or more value into set
2、sismember [key] [value]						--check value is exists
3、scard [key]									--get count from key
4、srem [key] [value]							--remove certain value
5、srandmember [key] [count]					--get random [count] value from [key]
6、spop [key]									--remove random value from [key]
7、smembers [key]								--get all members from set 
8、smove [key1] [key2] [value]					--move [key1] [value] to [key2]
9、sdiff [key1] [key2]							--diffrent value from key1 and key2
10、sinter [key1] [key2]						--same value from key1 and key2,共同关注，共同爱好，二度好友
11、sunion [key1] [key2]						--contain value key1 and key2

hash类型（map）：key：value-key：value
1、hset [key] [field] [value] 					--设置一个具体的值
2、hget [key] [field]							--获取一个具体的值
3、hmset [key] [field1] [value1] [field2] [value2]--设置多个值
4、hmget [key] [field1] [field2] 				--获取多个值
5、hmgetall [key] 								--获取hash所有值
6、hexists [key] [field]						--判断指定字段是否存在
7、hkeys [key]									--只获取hash中key
8、hvals [key]									--只获取hash中value
9、hincrby [key] [field] [increment]			--递增[increment],如果increment为负数就是递减
10、hsetnx [key] [field] [value] 				--如果存在不设置，存在就不能设置
hash更适合存储对象，string更适合存储字符串

zset类型：
在set基础上增加了一个值 zset k1 score1 v1
1、zadd [key] [score1] [value1] [score2] [value2] --设置一个或者多个具体的值
2、ZRANGEBYSCORE [key] [-inf +inf] [WITHSCORES] [LIMIT offset count] --按score从小到大返回若干个。其中 -inf和+inf表示正无穷到负无穷，输入的是分数，[LIMIT offset count]表示从offset开始，往后再找count个，[WITHSCORES]表示输出分数
3、ZREVRANGE [key] [start] [stop] [WITHSCORES] --按score排序，从大到小（-1 0）返回，[start] [stop] 输入的是index
4、zrange [key] [start] [stop] [WITHSCORES]		--返回从start到stop的元素
5、zrem [key] [member] [member ...]			--移除指定元素
6、zcount [key] [min] [max]					--统计集合中min-max区间中元素个数
7、zcard [key]								--统计集合中元素个数